#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from nomad.datamodel.metainfo.basesections import ProcessStep
from nomad.datamodel.metainfo.basesections import Activity
from nomad.datamodel.metainfo.basesections import ExperimentStep
from nomad.datamodel.metainfo.basesections import Analysis
from nomad.datamodel.metainfo.basesections import Measurement
from nomad.datamodel.metainfo.basesections import Process
from nomad.datamodel.metainfo.basesections import CompositeSystem
from nomad.datamodel.metainfo.basesections import (
    PublicationReference,
)
from nomad.datamodel.metainfo.basesections import Experiment
from nomad.datamodel.data import EntryData
import numpy as np
from typing import (
    TYPE_CHECKING,
)
from nomad.metainfo import (
    MSection,
    Package,
    Quantity,
    SubSection,
    MEnum,
    Reference,
    Datetime,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)
if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name=' Experiment')


class Solutions(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    precursor = Quantity(
        type=Solution,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )


class CaP_Experiment(Experiment, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    Based_on_Experiment = Quantity(
        type=CaP_Experiment,
        description='the experiment this experiment is based on',
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )
    Difference_to_previous_experiment = Quantity(
        type=str,
        description='differences to previous experiment',
        a_eln={
            "component": "StringEditQuantity"
        },
        shape=["*"],
    )
    Based_on_publication = SubSection(
        section_def=PublicationReference,
        a_eln=None,
    )
    steps = SubSection(
        section_def=CaPSteps,
        repeats=True,
    )
    solutions = SubSection(
        section_def=Solutions,
        repeats=True,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `CaP_Experiment` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class CaPSteps(ExperimentStep, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    activity = Quantity(
        type=CaPActivity,
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `CaPSteps` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class CaPActivity(Activity, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `CaPActivity` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class CaP_sample(CompositeSystem, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `CaP_sample` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class SolutionPreparation(Process, CaPActivity, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `SolutionPreparation` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Solution(CompositeSystem, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Solution` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class ReactorProgram(Process, CaPActivity, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    data_file = Quantity(
        type=str,
        description='''
        A reference to an uploaded .csv from the synthesis process.
        ''',
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        a_eln={
            "component": "FileEditQuantity"
        },
    )
    steps = SubSection(
        section_def=ProgramSteps,
        repeats=True,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `ReactorProgram` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class ProgramSteps(ProcessStep, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `ProgramSteps` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class AddingSolution(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    reference = Quantity(
        type=Solution,
        description=' ',
        a_eln={
            "component": "ReferenceEditQuantity",
            "label": "Solution"
        },
    )
    amount_of_solution = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "milliliter"
        },
        shape=[1],
        unit="milliliter",
    )
    rate = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "milliliter/minute"
        },
        shape=[1],
        unit="milliliter/minute",
    )


class ReactorProgramStep(ProgramSteps, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    stirring_ration_speed = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "1/minute"
        },
        shape=[1],
        unit="1/minute",
    )
    temperature_setpoint = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "\u00b0C"
        },
        shape=[1],
        unit="\u00b0C",
    )
    heating_rate = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "K/minute"
        },
        shape=[1],
        unit="K/minute",
    )
    AddingSolution = SubSection(
        section_def=AddingSolution,
        base_sections=[
            "CompositeSystemReference"
        ],
        repeats=True,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `ReactorProgramStep` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Excitation(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    Wavelenght = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        shape=[1],
        unit="nanometer",
    )
    Slit = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        shape=[1],
        unit="nanometer",
    )


class Emission(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    Detector = Quantity(
        type=str,
        description=' ',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    Integration_time = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "second"
        },
        shape=[1],
        unit="second",
    )
    DetectorSlit = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        shape=[1],
        unit="nanometer",
    )
    GratingLines = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity"
        },
        shape=[1],
    )
    GratingCenter = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        shape=[1],
        unit="nanometer",
    )
    UnknownSetting = Quantity(
        type=str,
        description=' ',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    Cycles = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity"
        },
        shape=[1],
    )
    Delay = Quantity(
        type=np.float64,
        description=' ',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "second"
        },
        shape=[1],
        unit="second",
    )
    Dark_offset = Quantity(
        type=str,
        description=' ',
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class MeasurementSettings(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    excitation = SubSection(
        section_def=Excitation,
    )
    emission = SubSection(
        section_def=Emission,
    )


class LuminescenceMeasurements(Measurement, CaPActivity, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    Filter = Quantity(
        type=np.float64,
        description='optical filter',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "nanometer"
        },
        shape=[1],
        unit="nanometer",
    )
    Measurement_Option = Quantity(
        type=MEnum(['in-situ', 'ex-situ']),
        description='Measurement option',
        a_eln={
            "component": "RadioEnumEditQuantity"
        },
    )
    measurement_settings = SubSection(
        section_def=MeasurementSettings,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `LuminescenceMeasurements` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Sensors(Process, CaPActivity, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    List_of_sensors = Quantity(
        type=str,
        description=' ',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    Sensor_setup_drawing = Quantity(
        type=str,
        description=' ',
        a_eln={
            "component": "RichTextEditQuantity"
        },
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Sensors` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class SampleRemoval(Process, CaPActivity, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    Sample_removal = Quantity(
        type=bool,
        a_eln={
            "component": "BoolEditQuantity"
        },
    )
    steps = SubSection(
        section_def=SampleRemovalSteps,
        repeats=True,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `SampleRemoval` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class SampleRemovalSteps(ProcessStep, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    sample_at_removal_time = Quantity(
        type=CaP_sample,
        description='sample that was removed from the reactor at a given time in minutes',
        a_eln={
            "component": "ReferenceEditQuantity"
        },
    )
    duration = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minute",
            "label": "removal time in minutes"
        },
        unit="minute",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `SampleRemovalSteps` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class SampleTreatment(Process, CaPActivity, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    steps = SubSection(
        section_def=SampleTreatmentSteps,
        repeats=True,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `SampleTreatment` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class SampleTreatmentSteps(ProcessStep, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `SampleTreatmentSteps` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Rest(SampleTreatmentSteps, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Rest` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class PrepareForXRD(SampleTreatmentSteps, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `PrepareForXRD` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Results(Analysis, CaPActivity, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Results` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


m_package.__init_metainfo__()
